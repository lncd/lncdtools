#!/usr/bin/env bash
# tat2: time-averaged T2*
#  glue for 3dcalc 3dTcat and 3dTstat (+ 3dNotes)
#  to compute time average T2

# default values
t2_inv=0                       # before volnorm (3dcalc, 3dTstat)
MASK_REL="subject_mask.nii.gz" # 3dROIstats: use to calculate volnorm.1D
MASK=""                        #  "
MKMASK=0                       #  "
volnorm_opt="-nzmedian"        # 3dcalc: run_tat2.nii.gz (vol normalized)
SCALE=1000                     #  "
vox_scale=1                    #  "
use_zscore=0                   #  "
MAXVOLS=-1                     #  "      truncate how many volumes are in run_tat2.nii.gz
censor_rel=""                  # 3dTcat: truncate input
tnorm_opt="-nzmean"            # 3dTstat: final output  (time normalized)

OUTPUT=tat2star.nii.gz
TMPLOCATION=/tmp
CLEAN=1

# all the inputs (possibly globs) we want to work on
declare -a GLOBFILES

# 20210218WF - hygenic file usage -- tmp files after crash clog fileystem
tmpd=""
trap '[ -n "$tmpd" -a -d "$tmpd" -a $CLEAN -eq 1 ] && [[ "$tmpd" =~ $TMPLOCATION ]] && rm -r "$tmpd"' EXIT

# 20201116
#  back to mean default
# add
#  across-TR median (instead of mean)
#  whole brain normalization to mean (instead of sum)
#  and whole brain z-score normalization instead

##
# intially from
# https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0016093
# author correspondence
# > The normalization is within the brain for each time point.
# > Not all voxels in the volume, but only those that belong to the brain mask.
# > Then we normalize so that the sum of all brain voxels is some fixed number,
# > e.g., 10000. The number doesn't really matter.
# also see "Relative Concentration of Brain Iron (rcFe)"
# https://www.biorxiv.org/content/biorxiv/early/2019/03/16/579763.full.pdf


usage(){
  cat <<-HEREDOC
USAGE
    tat2 '/paths/to/*/t2.nii.gz' [ -mask_rel $MASK_REL | -mask /the/only/mask.nii.gz | -mkmask]  [-output $OUTPUT] [-scale $SCALE]  [-censor_rel relative/censor.1D | -censor_rel s/epi/mask/] [-median_time|-mean_time]  [-median_vol|-mean_vol|-zscore_vol] [-no_voxscale] [-inverse] [-noclean] [-verbose] [-tmp $TMPLOCATION]

SYNOPSIS
  calculates time averaged T2* like:
     1) 3dROIstats > volnorm.1D
        # tune with -{median,mean,zscor}_vol, and -mask, -mkmask, or -mask_rel
     2) 3dcalc -x input_1  -m volnorm_1.1D -expr "(x/m)*SCALE/numvox #rep. f.ea. input
        # tune with -no_voxscale, -scale
     3) 3dTstat allnormed_concated.nii.gz
        # tune with -{median,mean}_time
  final 'tat2start.nii.gz' will be in the cwd

OPTIONS
  -censor_rel FILE
    specify the motion censor file. single column no header file. nLines = nVols. 0=exclude, 1=keep.
    either a filename or regexp
       as a filename in input nifti directory (resolves to \$(dirname \$input)/\$censor_rel)  OR
       as a perl regexp run on \$input. like 's/(rest-\\d)_bold.nii.gz/\\1_cesnor.1d/'
    despite switch's name, FILE also be an absolute path (start with '/')

  -maxvols NVOL
     limit each run to NVOL volumes. run after and only after censor_rel.
     useful when groups (e.g. young, old) have disproportonate censored volumes

  -median_time or -mean_time
        set how voxels are collapsed across time (3dTstat)
        time norm default: '$tnorm_opt'
        (history: mean until 20201117)

  -median_vol or -mean_vol
        set value used to scale across volume (each TR, 3dROIstats)
        vol norm default: '$volnorm_opt'
        (history: median [20210302],  mean [20201116], median [20201016])

  -inverse     create 1/t2* and use as initial input
  -zscore_vol  changes expression to '(x-m)/s' instead of 'x/m' for 3dcalc vol norm
  -no_voxscale disables scaleing. (SCALE=1, not normalized by number of nzvoxels)


  -mask        use mask to create volnorm.1D (-median_vol or -mean_vol)
               default none, defer to mask_rel
  -mask_rel    volnorm mask is relative to the input nifit (default: subject_mask.nii.gz)
  -mkmask      ensures the number of voxels used to normalize is the same
               across runs by create a coverage mask from all inputs
               -nzmedian/nzmean and '-count -non-zero' could maybe get away with no mask,
               but option is not provided

  -noclean     keeps tmp folder around, useful for debugging
  -tmp DIR     sets the directory to use for temporary calculations to DIR.
               useful if forking enough jobs to overwhelm /tmp or using with -noclean
REFS
  https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0016093
  https://www.biorxiv.org/content/biorxiv/early/2019/03/16/579763.full.pdf
HEREDOC
  exit 1
}
err() { echo -e "$@" >&2; exit 1; }
msg() { echo -e "# [$(date)] $@"; }

find_censor_file(){
  local input="$1"; shift
  local censor_file="$1"; shift
  local censor_file="$(dirname "$input")/$censor_rel"

  # if given an absolute path. try that
  [ ! -r "$censor_file" -a ${censor_rel:0:1} == "/" ] &&
     censor_file="$censor_rel"

  # try regexp pattern replace if censor_rel looks like s/
  [ ! -r "$censor_file" -a ${censor_rel:0:2} == "s/" ] &&
     censor_file="$(echo "$input" | perl -pe "$censor_rel")"

  # make sure we didn't just find the input file
  if [ "$censor_file" == "$input" ]; then
     rm -r $tmpd
     err "ERR: censor file subsitition failed '$censor_file' matches inputfile! rel '$censor_rel' for '$input'"
  fi

  # and make sure we actually found a file
  if [ ! -r "$censor_file" ]; then
     rm -r $tmpd
     err "ERR: censor file '$censor_file' DNE!"
  fi

  echo $censor_file
}

# pull out good index (censor=1 means keep). zero based
where1csv(){ perl -lne 'push @i, $.-1 if /^1/; END{print join ",", @i;}' "$@"; }
firstn_csv() { perl -F, -slane 'print $n<=0?$_:(join ",", grep {!/^$/} @F[0..$n-1])' -- -n=$1; }

parse_args(){
   # keep args around for 3dNotes history
   allargs="$@"


   # read in any arguments/paramaters
   while [ $# -gt 0 ]; do
    case $1 in
     -mask)       MASK="$2"; shift 2;;
     -mask_rel)   MASK_REL="$2"; shift 2;;
     -output)     OUTPUT="$2"; shift 2;;
     -scale)      SCALE="$2"; shift 2;;
     -censor_rel) censor_rel="$2"; shift 2;;
     -tmp)        TMPLOCATION="$2"; shift 2;;
     -maxvols)    MAXVOLS="$2"; shift 2;;
     -mkmask)     MKMASK=1; MASK_REL=""; shift;;
     -median_vol) volnorm_opt="-nzmedian"; shift;;
     -mean_vol)   volnorm_opt="-nzmean"; shift;;
     -zscore_vol) use_zscore=1; shift;;
     -mean_time)  tnorm_opt="-nzmean"; shift;;
     -median_time)tnorm_opt="-nzmedian"; shift;;
     -inverse)    t2_inv=1; shift;;
     -no_voxscale)vox_scale=0; shift;;
     -noclean)    CLEAN=0; shift;;
     -verbose)    set -x; shift;;
     -h*)         usage;;
     -*)          echo "unknown option '$1'"; usage;;
     *)           GLOBFILES+=("$1"); shift;;
    esac
   done
   return 0
}

args_are_sane(){
   # help if nothing given
   [ $# -eq 0 ] && usage
   parse_args "$@"
   echo "#files/globs: ${#GLOBFILES[@]}"
   # need to have at least one file to average
   [ -z "${GLOBFILES[*]}" ] && usage

   # how many files do we have
   nfiles=$(find -L ${GLOBFILES[@]} -maxdepth 0 | wc -l)
   [ $nfiles -eq 0 ] && err "no files match input GLOBFILESs: ${GLOBFILES[@]}"
   [ $nfiles -eq 1 ] && echo "WARNING: only one file matches '${GLOBFILES[@]}'. expected all (>1) runs"
   [ $nfiles -gt 10 ] && echo "WARNING: running on $nfiles epi files! Are you sure you don't want to run one visit at a time?"

   [ -r "$OUTPUT" ] && echo "# have $OUTPUT; rm $OUTPUT # to redo" && exit 0
   [ "$MAXVOLS" == "1" ] && echo "-maxvols cannot be 1. 3dcalc doesn't like applying a single value 1D file to a 4D dataset" && exit 1
   return 0
}


one_ta(){
   # GLOBALS:
   #  MASK, MASK_REL, censor_rel, MAXVOLS,
   #  t2_inv, volnorm_opt, use_zscore, SCALE, vox_scale, all_numvox
   local cnt="$1"; shift
   local input="$1"; shift
   local tmpd="$1"; shift
   [ -n "$MASK" ] && mask="$MASK" || mask="$(dirname "$input")/$MASK_REL"
   [ ! -f $mask ] && err "mask '$mask' DNE; add -mkmask to create"
   # add _tat2.nii.gz to the end
   runoutput="$tmpd/${cnt}_tat2.nii.gz"

   # calc number of voxels
   numvox=$(3dBrickStat -count -non-zero $mask|sed 's/[\t ]//g')

   # verbose
   msg "tat2: $input -> $runoutput"
   volnorm_1D=$tmpd/${cnt}_volnorm.1D
   vol_sd=$tmpd/${cnt}_sd.1D

   # censor input
   if [ -n "$censor_rel" ]; then
      censor_file=$(find_censor_file "$input" "$censor_rel")
      # if MAXVOLS is default "-1", firstn_cvs does nothing
      idxs=$(where1csv $censor_file| firstn_csv $MAXVOLS)
      nkeep=$(echo $idxs| tr ',' '\n' |wc -l)
      file_volnote=keep${nkeep}
      msg "censor: using $nkeep/$(3dinfo -nt $input) timepoints [$censor_file]"
      if [ $MAXVOLS -gt 0 ]; then
         [ $nkeep -ne $MAXVOLS ]  &&
            msg "WARNING:run$cnt: have $nkeep != maxvols ($MAXVOLS). censored more volumes than min required?!"
         # nkeep next used for file names.
         file_volnote=lastidx${idxs/*,/}
      fi
      # truncate input
      newinput="$tmpd/${cnt}_inputcensor_${file_volnote}.nii.gz"
      3dTcat -prefix $newinput "$input[$idxs]"
      input="$newinput"
      # must match *_tat2.nii.gz to be picked up by 3dTstat at the end
      runoutput="$tmpd/${cnt}_${file_volnote}_tat2.nii.gz"
   fi

   # if we want 1/t2*, switch up input to that
   if [ $t2_inv -eq 1 ]; then
       inv_out="$tmpd/${cnt}_inv.nii.gz"
       3dcalc -datum float -x $input -expr 1/x -prefix $inv_out
       input="$inv_out"
   fi

   # calc sum of each volume. output is normalize value per TR
   3dROIstats -nomeanout $volnorm_opt -mask $mask -1Dformat $input > $volnorm_1D
   # do the same for stddev (sigma) if zscoring
   [ $use_zscore -eq 1 ] &&
     3dROIstats -nomeanout -nzsigma -mask $mask -1Dformat $input > $vol_sd

   ## what does 3dcalc's expression look like
   # default is x/m*$SCALE/$numvox
   # 4 possibilities. product of
   # '(x-m)/s' vs 'x/m' AND '$SCALE/$numvox' vs '1'
   #  zscore   vs  not   *   vox_scale       vs  not
   sd_input=""
   calc_expr="(x/m)"
   calc_scale="$SCALE/$numvox"

   if [ $use_zscore -eq 1 ]; then
    sd_input="-s $vol_sd"
    calc_expr="(x-m)/s"
   fi
   [ $vox_scale -eq 0 ] && calc_scale="1"


   # normalize each voxel by the volume average or median
   # scale by SCALE and number of good (within mask) voxels in the run
   # sd_input is only non-empty when '-zscore'
   # '$calc_expr*$calc_scale' defaults to (x/m)*$SCALE/$numvox
   #     s.t.
   #          v=(x/mean(x))*(1000/length(x))
   #          sum(v) = 1000
   3dcalc \
     -x $input \
     -m $volnorm_1D \
     $sd_input \
     -datum float -overwrite \
     -expr "$calc_expr*$calc_scale"\
     -prefix $runoutput
   all_numvox="$all_numvox$numvox,"
}

_tat2(){
   tmpd=$(mktemp -d $TMPLOCATION/tat2star_XXXX)
   cnt=0
   all_numvox="" # will be populated with each subjectmask

   if [ $MKMASK -eq 1 ]; then
         MASK="$tmpd/subj_mask.nii.gz"
         coverage_mask $MASK "${GLOBFILES[@]}"
   fi

   for input in ${GLOBFILES[@]}; do
      one_ta $cnt "$input" "$tmpd"
      let ++cnt
   done
   actual_nfiles=$(ls $tmpd/*_tat2.nii.gz|wc -l)

   [ $actual_nfiles -ne $nfiles ] && err "ERROR: create $actual_nfiles/$nfiles ($cnt iterations) in $tmpd"

   msg "tat2star $OUTPUT"
   if [ $nfiles -gt 1 ]; then
      3dTcat -overwrite -prefix $tmpd/tat2_all.nii.gz $tmpd/*_tat2.nii.gz
      3dTstat -prefix $OUTPUT -overwrite $tnorm_opt $tmpd/tat2_all.nii.gz
   else
      3dTstat -prefix $OUTPUT -overwrite $tnorm_opt $tmpd/*_tat2.nii.gz
   fi

   all_nts="$(3dinfo -nt $tmpd/*_tat2.nii.gz|tr '\n' ',')"
   3dNotes -h "$0 $allargs # $(pwd); SCALE=$SCALE, nvoxes=$all_numvox; nt=$all_nts; vol:$volnorm_opt, time:$tnorm_opt" $OUTPUT

   [ $CLEAN -eq 1 ] && \
      rm -r $tmpd ||\
      echo "find temporary files in '$tmpd'; remove '-noclean' if not testing"

   return 0
}

# run if not sourced
if ! [[ "$(caller)" != "0 "* ]]; then
   set -eou pipefail
   args_are_sane "$@"
   _tat2
fi
