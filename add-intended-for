#!/usr/bin/env bash
#
# 20221020WF - init. lncd "habit" project
# 20231110WF - into lncdtools
#
# add fieldmap annotations to task where fmriprep can find them

usage(){
   cat <<HEREDOC

USAGE:
  $(basename "$0") -fmap '*PA_run-1_epi.json' subj-1/ses-1/ [subj-2/ses-1/ ...]

OPTIONS:
  -fmap   pattern to find fmap json file. where to insert IntendedFor
  -bold   pattern to find bold file. default '*_bold.nii.gz' (can be *dwi.nii.gz)
  sesdir  any number of session dirs (dir that contains fmap/ and func/ or dwi/)

HEREDOC
}

csv_bolds(){
   local sesdir="$1"; shift
   local boldpat="${1}"
   (cd "$sesdir" &&
   find func/ dwi/\
      -name "$boldpat" \
      -not -name '*echo-*'|
     sed 's/^\|$/"/g'|
     paste -sd,)
}
find_se_file(){
   local sesdir="${1:?find_se_file requires session dir}"
   local pattern="${2:?find_se_file requires a json pattern}"
   mapfile -t sefiles < <(find "$sesdir/fmap" -name "$pattern") 
   if [[ -z "${sefiles[*]}" || ! -r "${sefiles[0]}" ]]; then
      warn "no like '$sesdir/fmap/$pattern'?" 
      exit 1
   fi
   [ ${#sefiles[@]} -gt 1 ] && warn ">1 match for '$pattern' found: ${sefiles[*]}"
   printf "%s\n" "${sefiles[@]}"
}

add_intended_for(){
   local sefile boldfile str
   sefile="$1"; shift
   boldfile="$1"; shift
   # (DANGER) inline replace on
   # matching files without an 'IntendedFor' line
   str="\"IntendedFor\": [$boldfile],"
   grep -L IntendedFor "$sefile" |
      xargs -r dryrun sed "s;{;{\n$str;" -i || :
   return 0
}

_intendedFor() {
  warn "# WARNING: $0 is untested"
  local boldpatt='*_bold.nii.gz'
  local sepatt=""
  sesdirs=()
  [ $# -eq 0 ] && usage && exit 1
  while [ $# -gt 0 ]; do
     case "$1" in
        -bold) boldpatt="$2"; shift 2;;
        -fmap) sepatt="$2"; shift 2;;
        -help) usage; exit 0;;
        *) sesdirs+=("$1"); shift 1;;
     esac
  done

  # check inputs
  [ -z "$sepatt" ] &&
     echo "ERROR: no -fmap pattern; see -help" &&
     exit 1
  ! [[ "$sepatt" =~ .json$ ]] &&
     echo "-fmap pattern must end with .json" &&
     exit 2

  for sesdir in "${sesdirs[@]}"; do
     mapfile -t sefiles < <(find_se_file "$sesdir" "$sepatt")
     for sefile in "${sefiles[@]}"; do
        boldfile=$(csv_bolds "$sesdir" "$boldpatt")
        [ -z "$boldpatt" ] && warn "no bold in $sesdir/func matching $boldpatt" && return 1
        add_intended_for "$sefile" "$boldfile" || :
     done
  done
  return 0
}

# if not sourced (testing), run as command
eval "$(iffmain "_intendedFor")"
